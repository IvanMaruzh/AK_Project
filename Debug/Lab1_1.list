
Lab1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002130  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080022c0  080022c0  000032c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800232c  0800232c  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  0800232c  0800232c  0000332c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002334  08002334  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002334  08002334  00003334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002338  08002338  00003338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800233c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          0000019c  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f8  200001f8  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003a2a  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001100  00000000  00000000  00007ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000478  00000000  00000000  00008bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000032a  00000000  00000000  00009030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020088  00000000  00000000  0000935a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000064a5  00000000  00000000  000293e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bff49  00000000  00000000  0002f887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ef7d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001468  00000000  00000000  000ef814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000f0c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080022a8 	.word	0x080022a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080022a8 	.word	0x080022a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <delay_init>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

void delay_init()
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	  RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000564:	4b14      	ldr	r3, [pc, #80]	@ (80005b8 <delay_init+0x58>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a13      	ldr	r2, [pc, #76]	@ (80005b8 <delay_init+0x58>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
	  TIM4->PSC = SystemCoreClock / 1000000 - 1;
 8000570:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <delay_init+0x5c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <delay_init+0x60>)
 8000576:	fba2 2303 	umull	r2, r3, r2, r3
 800057a:	0c9b      	lsrs	r3, r3, #18
 800057c:	4a11      	ldr	r2, [pc, #68]	@ (80005c4 <delay_init+0x64>)
 800057e:	3b01      	subs	r3, #1
 8000580:	6293      	str	r3, [r2, #40]	@ 0x28
	  TIM4->ARR = 0xFFFFFFFF;
 8000582:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <delay_init+0x64>)
 8000584:	f04f 32ff 	mov.w	r2, #4294967295
 8000588:	62da      	str	r2, [r3, #44]	@ 0x2c

	  TIM4->CR1 |= TIM_CR1_ARPE;
 800058a:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <delay_init+0x64>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <delay_init+0x64>)
 8000590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000594:	6013      	str	r3, [r2, #0]
	  TIM4->EGR |= TIM_EGR_UG;
 8000596:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <delay_init+0x64>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a0a      	ldr	r2, [pc, #40]	@ (80005c4 <delay_init+0x64>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6153      	str	r3, [r2, #20]

	  TIM4->CR1 |= TIM_CR1_CEN;
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <delay_init+0x64>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <delay_init+0x64>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40023800 	.word	0x40023800
 80005bc:	20000000 	.word	0x20000000
 80005c0:	431bde83 	.word	0x431bde83
 80005c4:	40000800 	.word	0x40000800

080005c8 <micro_delay>:

void micro_delay(uint32_t microseconds)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = TIM4->CNT;
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <micro_delay+0x2c>)
 80005d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d4:	60fb      	str	r3, [r7, #12]
	while ((TIM4->CNT - clk_cycle_start) < microseconds);
 80005d6:	bf00      	nop
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <micro_delay+0x2c>)
 80005da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d8f8      	bhi.n	80005d8 <micro_delay+0x10>
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	40000800 	.word	0x40000800

080005f8 <DHT11_PortInit>:

void DHT11_PortInit()
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <DHT11_PortInit+0x40>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <DHT11_PortInit+0x40>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= GPIO_MODER_MODER1_0;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <DHT11_PortInit+0x44>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <DHT11_PortInit+0x44>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <DHT11_PortInit+0x44>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4a08      	ldr	r2, [pc, #32]	@ (800063c <DHT11_PortInit+0x44>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD1_0;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <DHT11_PortInit+0x44>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4a05      	ldr	r2, [pc, #20]	@ (800063c <DHT11_PortInit+0x44>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40020000 	.word	0x40020000

08000640 <DHT11_Start>:


void DHT11_Start()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	delay_init();
 8000644:	f7ff ff8c 	bl	8000560 <delay_init>
	GPIOA->MODER |= GPIO_MODER_MODER1_0;
 8000648:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <DHT11_Start+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <DHT11_Start+0x64>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_0;
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <DHT11_Start+0x64>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <DHT11_Start+0x64>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6093      	str	r3, [r2, #8]

	GPIOA->BSRR |= GPIO_BSRR_BR_1;
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <DHT11_Start+0x64>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a0f      	ldr	r2, [pc, #60]	@ (80006a4 <DHT11_Start+0x64>)
 8000666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066a:	6193      	str	r3, [r2, #24]
	micro_delay(20000);   // wait for 20ms
 800066c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000670:	f7ff ffaa 	bl	80005c8 <micro_delay>
	GPIOA->BSRR |= GPIO_BSRR_BS_1;
 8000674:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <DHT11_Start+0x64>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <DHT11_Start+0x64>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	6193      	str	r3, [r2, #24]
	micro_delay(30);
 8000680:	201e      	movs	r0, #30
 8000682:	f7ff ffa1 	bl	80005c8 <micro_delay>

	GPIOA->MODER &= ~GPIO_MODER_MODER1_0;
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <DHT11_Start+0x64>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a06      	ldr	r2, [pc, #24]	@ (80006a4 <DHT11_Start+0x64>)
 800068c:	f023 0304 	bic.w	r3, r3, #4
 8000690:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD1_0;
 8000692:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <DHT11_Start+0x64>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	4a03      	ldr	r2, [pc, #12]	@ (80006a4 <DHT11_Start+0x64>)
 8000698:	f023 0304 	bic.w	r3, r3, #4
 800069c:	60d3      	str	r3, [r2, #12]
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020000 	.word	0x40020000

080006a8 <DHT11_Response>:

uint8_t DHT11_Response()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	71fb      	strb	r3, [r7, #7]
	micro_delay(40);
 80006b2:	2028      	movs	r0, #40	@ 0x28
 80006b4:	f7ff ff88 	bl	80005c8 <micro_delay>
	if ((GPIOA->IDR & GPIO_PIN_1) == (uint32_t)GPIO_PIN_RESET)
 80006b8:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <DHT11_Response+0x4c>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d10a      	bne.n	80006da <DHT11_Response+0x32>
	{
		micro_delay(80);
 80006c4:	2050      	movs	r0, #80	@ 0x50
 80006c6:	f7ff ff7f 	bl	80005c8 <micro_delay>

		if ((GPIOA->IDR & GPIO_PIN_1) != (uint32_t)GPIO_PIN_RESET)
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <DHT11_Response+0x4c>)
 80006cc:	691b      	ldr	r3, [r3, #16]
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <DHT11_Response+0x32>
			Response = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
	}

	while ((GPIOA->IDR & GPIO_PIN_1) != (uint32_t)GPIO_PIN_RESET);   // wait for the pin to go low
 80006da:	bf00      	nop
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <DHT11_Response+0x4c>)
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	f003 0302 	and.w	r3, r3, #2
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f9      	bne.n	80006dc <DHT11_Response+0x34>

	return Response;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40020000 	.word	0x40020000

080006f8 <DHT11_Read>:

uint8_t DHT11_Read()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	uint8_t a, b;

	for (a = 0; a < 8; a++)
 80006fe:	2300      	movs	r3, #0
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	e034      	b.n	800076e <DHT11_Read+0x76>
	{
		while ((GPIOA->IDR & GPIO_PIN_1) == (uint32_t)GPIO_PIN_RESET);
 8000704:	bf00      	nop
 8000706:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <DHT11_Read+0x88>)
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f9      	beq.n	8000706 <DHT11_Read+0xe>
		micro_delay(40);   // wait for 40 us
 8000712:	2028      	movs	r0, #40	@ 0x28
 8000714:	f7ff ff58 	bl	80005c8 <micro_delay>

		if ((GPIOA->IDR & GPIO_PIN_1) == (uint32_t)GPIO_PIN_RESET)   // if the pin is low
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <DHT11_Read+0x88>)
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	f003 0302 	and.w	r3, r3, #2
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10e      	bne.n	8000742 <DHT11_Read+0x4a>
			b &= ~(1<<(7-a));
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f1c3 0307 	rsb	r3, r3, #7
 800072a:	2201      	movs	r2, #1
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	b25b      	sxtb	r3, r3
 8000732:	43db      	mvns	r3, r3
 8000734:	b25a      	sxtb	r2, r3
 8000736:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800073a:	4013      	ands	r3, r2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	71bb      	strb	r3, [r7, #6]
 8000740:	e00b      	b.n	800075a <DHT11_Read+0x62>
		else
			b |= (1<<(7-a));
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	f1c3 0307 	rsb	r3, r3, #7
 8000748:	2201      	movs	r2, #1
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	b25a      	sxtb	r2, r3
 8000750:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000754:	4313      	orrs	r3, r2
 8000756:	b25b      	sxtb	r3, r3
 8000758:	71bb      	strb	r3, [r7, #6]

		while ((GPIOA->IDR & GPIO_PIN_1) != (uint32_t)GPIO_PIN_RESET);
 800075a:	bf00      	nop
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <DHT11_Read+0x88>)
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	f003 0302 	and.w	r3, r3, #2
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f9      	bne.n	800075c <DHT11_Read+0x64>
	for (a = 0; a < 8; a++)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	3301      	adds	r3, #1
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b07      	cmp	r3, #7
 8000772:	d9c7      	bls.n	8000704 <DHT11_Read+0xc>
	}
	return b;
 8000774:	79bb      	ldrb	r3, [r7, #6]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40020000 	.word	0x40020000

08000784 <lcd_send_cmd>:
#include "i2c-lcd.h"


void lcd_send_cmd(char cmd)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f023 030f 	bic.w	r3, r3, #15
 8000794:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	f043 030c 	orr.w	r3, r3, #12
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	f043 030c 	orr.w	r3, r3, #12
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	72fb      	strb	r3, [r7, #11]
	i2c_write_bytes(SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2204      	movs	r2, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	204e      	movs	r0, #78	@ 0x4e
 80007ce:	f000 f8f1 	bl	80009b4 <i2c_write_bytes>
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <lcd_send_data>:

void lcd_send_data (char data)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b084      	sub	sp, #16
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f023 030f 	bic.w	r3, r3, #15
 80007ea:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f043 030d 	orr.w	r3, r3, #13
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	f043 0309 	orr.w	r3, r3, #9
 8000802:	b2db      	uxtb	r3, r3
 8000804:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	f043 030d 	orr.w	r3, r3, #13
 800080c:	b2db      	uxtb	r3, r3
 800080e:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	f043 0309 	orr.w	r3, r3, #9
 8000816:	b2db      	uxtb	r3, r3
 8000818:	72fb      	strb	r3, [r7, #11]
	i2c_write_bytes(SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4);
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2204      	movs	r2, #4
 8000820:	4619      	mov	r1, r3
 8000822:	204e      	movs	r0, #78	@ 0x4e
 8000824:	f000 f8c6 	bl	80009b4 <i2c_write_bytes>
}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <lcd_clear>:

void lcd_clear()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ffa5 	bl	8000784 <lcd_send_cmd>
	HAL_Delay(10);
 800083a:	200a      	movs	r0, #10
 800083c:	f000 fb66 	bl	8000f0c <HAL_Delay>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
	switch (row)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d003      	beq.n	800085c <lcd_put_cur+0x18>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d005      	beq.n	8000866 <lcd_put_cur+0x22>
 800085a:	e009      	b.n	8000870 <lcd_put_cur+0x2c>
    {
		case 0:
            col |= 0x80;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000862:	603b      	str	r3, [r7, #0]
            break;
 8000864:	e004      	b.n	8000870 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800086c:	603b      	str	r3, [r7, #0]
            break;
 800086e:	bf00      	nop
    }

    lcd_send_cmd(col);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff85 	bl	8000784 <lcd_send_cmd>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <lcd_init>:

void lcd_init()
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50); // wait for >40ms
 8000886:	2032      	movs	r0, #50	@ 0x32
 8000888:	f000 fb40 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd(0x30);
 800088c:	2030      	movs	r0, #48	@ 0x30
 800088e:	f7ff ff79 	bl	8000784 <lcd_send_cmd>
	HAL_Delay(5); // wait for >4.1ms
 8000892:	2005      	movs	r0, #5
 8000894:	f000 fb3a 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd(0x30);
 8000898:	2030      	movs	r0, #48	@ 0x30
 800089a:	f7ff ff73 	bl	8000784 <lcd_send_cmd>
	HAL_Delay(1); // wait for >100us
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 fb34 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd(0x30);
 80008a4:	2030      	movs	r0, #48	@ 0x30
 80008a6:	f7ff ff6d 	bl	8000784 <lcd_send_cmd>
	HAL_Delay(10);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f000 fb2e 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd(0x20); // 4bit mode
 80008b0:	2020      	movs	r0, #32
 80008b2:	f7ff ff67 	bl	8000784 <lcd_send_cmd>
	HAL_Delay(10);
 80008b6:	200a      	movs	r0, #10
 80008b8:	f000 fb28 	bl	8000f0c <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80008bc:	2028      	movs	r0, #40	@ 0x28
 80008be:	f7ff ff61 	bl	8000784 <lcd_send_cmd>
	HAL_Delay(1);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f000 fb22 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80008c8:	2008      	movs	r0, #8
 80008ca:	f7ff ff5b 	bl	8000784 <lcd_send_cmd>
	HAL_Delay(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fb1c 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd(0x01); // clear display
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff ff55 	bl	8000784 <lcd_send_cmd>
	HAL_Delay(1);
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fb16 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80008e0:	2006      	movs	r0, #6
 80008e2:	f7ff ff4f 	bl	8000784 <lcd_send_cmd>
	HAL_Delay(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 fb10 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80008ec:	200c      	movs	r0, #12
 80008ee:	f7ff ff49 	bl	8000784 <lcd_send_cmd>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <lcd_send_string>:

void lcd_send_string(char *str)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 80008fe:	e006      	b.n	800090e <lcd_send_string+0x18>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff66 	bl	80007da <lcd_send_data>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1f4      	bne.n	8000900 <lcd_send_string+0xa>
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <i2c_port_init>:
#include "i2c_lcd_driver.h"


void i2c_port_init()
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000924:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <i2c_port_init+0x88>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	4a1f      	ldr	r2, [pc, #124]	@ (80009a8 <i2c_port_init+0x88>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB->MODER |= GPIO_MODER_MODE8_1;
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <i2c_port_init+0x8c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a1d      	ldr	r2, [pc, #116]	@ (80009ac <i2c_port_init+0x8c>)
 8000936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800093a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE9_1;
 800093c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <i2c_port_init+0x8c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1a      	ldr	r2, [pc, #104]	@ (80009ac <i2c_port_init+0x8c>)
 8000942:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000946:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] |= GPIO_AF4_I2C1<<0 | GPIO_AF4_I2C1<<4;
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <i2c_port_init+0x8c>)
 800094a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800094c:	4a17      	ldr	r2, [pc, #92]	@ (80009ac <i2c_port_init+0x8c>)
 800094e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000952:	6253      	str	r3, [r2, #36]	@ 0x24

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <i2c_port_init+0x88>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000958:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <i2c_port_init+0x88>)
 800095a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800095e:	6413      	str	r3, [r2, #64]	@ 0x40

	I2C1->CR2 |= 0b110010; //freq
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <i2c_port_init+0x90>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <i2c_port_init+0x90>)
 8000966:	f043 0332 	orr.w	r3, r3, #50	@ 0x32
 800096a:	6053      	str	r3, [r2, #4]
	I2C1->TRISE |= 0b110011; //freq+1
 800096c:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <i2c_port_init+0x90>)
 800096e:	6a1b      	ldr	r3, [r3, #32]
 8000970:	4a0f      	ldr	r2, [pc, #60]	@ (80009b0 <i2c_port_init+0x90>)
 8000972:	f043 0333 	orr.w	r3, r3, #51	@ 0x33
 8000976:	6213      	str	r3, [r2, #32]
	I2C1->CCR |= 250; //formula for time
 8000978:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <i2c_port_init+0x90>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a0c      	ldr	r2, [pc, #48]	@ (80009b0 <i2c_port_init+0x90>)
 800097e:	f043 03fa 	orr.w	r3, r3, #250	@ 0xfa
 8000982:	61d3      	str	r3, [r2, #28]

	I2C1->CR1 |= I2C_CR1_PE;
 8000984:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <i2c_port_init+0x90>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a09      	ldr	r2, [pc, #36]	@ (80009b0 <i2c_port_init+0x90>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= I2C_CR1_ACK;
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <i2c_port_init+0x90>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a06      	ldr	r2, [pc, #24]	@ (80009b0 <i2c_port_init+0x90>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40005400 	.word	0x40005400

080009b4 <i2c_write_bytes>:

void i2c_write_bytes(uint16_t addr, uint8_t *buf, uint16_t bytes_count)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	80fb      	strh	r3, [r7, #6]
 80009c0:	4613      	mov	r3, r2
 80009c2:	80bb      	strh	r3, [r7, #4]
  uint16_t i;

  //I2C1->CR1 &= ~I2C_CR1_POS;
  I2C1->CR1 |= I2C_CR1_ACK;
 80009c4:	4b27      	ldr	r3, [pc, #156]	@ (8000a64 <i2c_write_bytes+0xb0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a26      	ldr	r2, [pc, #152]	@ (8000a64 <i2c_write_bytes+0xb0>)
 80009ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ce:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= I2C_CR1_START;
 80009d0:	4b24      	ldr	r3, [pc, #144]	@ (8000a64 <i2c_write_bytes+0xb0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a23      	ldr	r2, [pc, #140]	@ (8000a64 <i2c_write_bytes+0xb0>)
 80009d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009da:	6013      	str	r3, [r2, #0]
  while (!READ_BIT(I2C1->SR1, I2C_SR1_SB));
 80009dc:	bf00      	nop
 80009de:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <i2c_write_bytes+0xb0>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f9      	beq.n	80009de <i2c_write_bytes+0x2a>
  //read state
  (void) I2C1->SR1;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <i2c_write_bytes+0xb0>)
 80009ec:	695b      	ldr	r3, [r3, #20]

  //Transmit Address SLAVE
  I2C1->DR = addr | 0x00;
 80009ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000a64 <i2c_write_bytes+0xb0>)
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	6113      	str	r3, [r2, #16]
  while (!READ_BIT(I2C1->SR1, I2C_SR1_ADDR));
 80009f4:	bf00      	nop
 80009f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <i2c_write_bytes+0xb0>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f9      	beq.n	80009f6 <i2c_write_bytes+0x42>
  (void) I2C1->SR1;
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <i2c_write_bytes+0xb0>)
 8000a04:	695b      	ldr	r3, [r3, #20]
  (void) I2C1->SR2;
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <i2c_write_bytes+0xb0>)
 8000a08:	699b      	ldr	r3, [r3, #24]


  for (i = 0; i < bytes_count; i++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	81fb      	strh	r3, [r7, #14]
 8000a0e:	e019      	b.n	8000a44 <i2c_write_bytes+0x90>
  {
	  I2C1->DR &= ~I2C_DR_DR;
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <i2c_write_bytes+0xb0>)
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	4a13      	ldr	r2, [pc, #76]	@ (8000a64 <i2c_write_bytes+0xb0>)
 8000a16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000a1a:	6113      	str	r3, [r2, #16]
	  I2C1->DR |= buf[i];
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <i2c_write_bytes+0xb0>)
 8000a1e:	691b      	ldr	r3, [r3, #16]
 8000a20:	89fa      	ldrh	r2, [r7, #14]
 8000a22:	6839      	ldr	r1, [r7, #0]
 8000a24:	440a      	add	r2, r1
 8000a26:	7812      	ldrb	r2, [r2, #0]
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a64 <i2c_write_bytes+0xb0>)
 8000a2c:	430b      	orrs	r3, r1
 8000a2e:	6113      	str	r3, [r2, #16]
	  while (!READ_BIT(I2C1->SR1, I2C_SR1_TXE));
 8000a30:	bf00      	nop
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <i2c_write_bytes+0xb0>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f9      	beq.n	8000a32 <i2c_write_bytes+0x7e>
  for (i = 0; i < bytes_count; i++)
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	3301      	adds	r3, #1
 8000a42:	81fb      	strh	r3, [r7, #14]
 8000a44:	89fa      	ldrh	r2, [r7, #14]
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d3e1      	bcc.n	8000a10 <i2c_write_bytes+0x5c>
  }
  I2C1->CR1 |= I2C_CR1_STOP;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <i2c_write_bytes+0xb0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a04      	ldr	r2, [pc, #16]	@ (8000a64 <i2c_write_bytes+0xb0>)
 8000a52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40005400 	.word	0x40005400

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 f9dc 	bl	8000e28 <HAL_Init>

  /* USER CODE BEGIN Init */
	i2c_port_init();
 8000a70:	f7ff ff56 	bl	8000920 <i2c_port_init>
	DHT11_PortInit();
 8000a74:	f7ff fdc0 	bl	80005f8 <DHT11_PortInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f884 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 f8ea 	bl	8000c54 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 8000a80:	f7ff feff 	bl	8000882 <lcd_init>
	lcd_send_string("POWER ON");
 8000a84:	4836      	ldr	r0, [pc, #216]	@ (8000b60 <main+0xf8>)
 8000a86:	f7ff ff36 	bl	80008f6 <lcd_send_string>
	HAL_Delay(2000);
 8000a8a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a8e:	f000 fa3d 	bl	8000f0c <HAL_Delay>
	lcd_clear();
 8000a92:	f7ff fecd 	bl	8000830 <lcd_clear>
	DHT11_Start();
 8000a96:	f7ff fdd3 	bl	8000640 <DHT11_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		DHT11_Start();
 8000a9a:	f7ff fdd1 	bl	8000640 <DHT11_Start>
		if(DHT11_Response())
 8000a9e:	f7ff fe03 	bl	80006a8 <DHT11_Response>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d053      	beq.n	8000b50 <main+0xe8>
		{
			RHI = DHT11_Read(); // Relative humidity integral
 8000aa8:	f7ff fe26 	bl	80006f8 <DHT11_Read>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b64 <main+0xfc>)
 8000ab2:	701a      	strb	r2, [r3, #0]
			RHD = DHT11_Read(); // Relative humidity decimal
 8000ab4:	f7ff fe20 	bl	80006f8 <DHT11_Read>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <main+0x100>)
 8000abe:	701a      	strb	r2, [r3, #0]
			TCI = DHT11_Read(); // Celsius integral
 8000ac0:	f7ff fe1a 	bl	80006f8 <DHT11_Read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b28      	ldr	r3, [pc, #160]	@ (8000b6c <main+0x104>)
 8000aca:	701a      	strb	r2, [r3, #0]
			TCD = DHT11_Read(); // Celsius decimal
 8000acc:	f7ff fe14 	bl	80006f8 <DHT11_Read>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <main+0x108>)
 8000ad6:	701a      	strb	r2, [r3, #0]
			SUM = DHT11_Read(); // Check sum
 8000ad8:	f7ff fe0e 	bl	80006f8 <DHT11_Read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b24      	ldr	r3, [pc, #144]	@ (8000b74 <main+0x10c>)
 8000ae2:	701a      	strb	r2, [r3, #0]

			if (RHI + RHD + TCI + TCD == SUM)
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <main+0xfc>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <main+0x100>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b6c <main+0x104>)
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b70 <main+0x108>)
 8000af8:	7812      	ldrb	r2, [r2, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b74 <main+0x10c>)
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d125      	bne.n	8000b50 <main+0xe8>
			{
				sprintf(strCopy,"Temp: %d.%d ", TCI, TCD);
 8000b04:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <main+0x104>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <main+0x108>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	491a      	ldr	r1, [pc, #104]	@ (8000b78 <main+0x110>)
 8000b10:	481a      	ldr	r0, [pc, #104]	@ (8000b7c <main+0x114>)
 8000b12:	f000 ff29 	bl	8001968 <siprintf>
				lcd_put_cur(0, 0);
 8000b16:	2100      	movs	r1, #0
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff fe93 	bl	8000844 <lcd_put_cur>
				lcd_send_string(strCopy);
 8000b1e:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <main+0x114>)
 8000b20:	f7ff fee9 	bl	80008f6 <lcd_send_string>
				lcd_send_data('C');
 8000b24:	2043      	movs	r0, #67	@ 0x43
 8000b26:	f7ff fe58 	bl	80007da <lcd_send_data>

				sprintf(strCopy,"RH: %d.%d ", RHI, RHD);
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <main+0xfc>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <main+0x100>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4912      	ldr	r1, [pc, #72]	@ (8000b80 <main+0x118>)
 8000b36:	4811      	ldr	r0, [pc, #68]	@ (8000b7c <main+0x114>)
 8000b38:	f000 ff16 	bl	8001968 <siprintf>
				lcd_put_cur(1, 0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fe80 	bl	8000844 <lcd_put_cur>
				lcd_send_string(strCopy);
 8000b44:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <main+0x114>)
 8000b46:	f7ff fed6 	bl	80008f6 <lcd_send_string>
				lcd_send_data('%');
 8000b4a:	2025      	movs	r0, #37	@ 0x25
 8000b4c:	f7ff fe45 	bl	80007da <lcd_send_data>
			}
		}
		HAL_Delay(2000);
 8000b50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b54:	f000 f9da 	bl	8000f0c <HAL_Delay>
		lcd_clear();
 8000b58:	f7ff fe6a 	bl	8000830 <lcd_clear>
		DHT11_Start();
 8000b5c:	e79d      	b.n	8000a9a <main+0x32>
 8000b5e:	bf00      	nop
 8000b60:	080022c0 	.word	0x080022c0
 8000b64:	20000078 	.word	0x20000078
 8000b68:	20000079 	.word	0x20000079
 8000b6c:	2000007a 	.word	0x2000007a
 8000b70:	2000007b 	.word	0x2000007b
 8000b74:	2000007c 	.word	0x2000007c
 8000b78:	080022cc 	.word	0x080022cc
 8000b7c:	20000080 	.word	0x20000080
 8000b80:	080022dc 	.word	0x080022dc

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	@ 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0320 	add.w	r3, r7, #32
 8000b8e:	2230      	movs	r2, #48	@ 0x30
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 ff08 	bl	80019a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b27      	ldr	r3, [pc, #156]	@ (8000c4c <SystemClock_Config+0xc8>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	4a26      	ldr	r2, [pc, #152]	@ (8000c4c <SystemClock_Config+0xc8>)
 8000bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb8:	4b24      	ldr	r3, [pc, #144]	@ (8000c4c <SystemClock_Config+0xc8>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <SystemClock_Config+0xcc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a20      	ldr	r2, [pc, #128]	@ (8000c50 <SystemClock_Config+0xcc>)
 8000bce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <SystemClock_Config+0xcc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be0:	2302      	movs	r3, #2
 8000be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be8:	2310      	movs	r3, #16
 8000bea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bec:	2302      	movs	r3, #2
 8000bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bf8:	2348      	movs	r3, #72	@ 0x48
 8000bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fa89 	bl	8001120 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c14:	f000 f838 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fceb 	bl	8001610 <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c40:	f000 f822 	bl	8000c88 <Error_Handler>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3750      	adds	r7, #80	@ 0x50
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_GPIO_Init+0x30>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <MX_GPIO_Init+0x30>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_GPIO_Init+0x30>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <Error_Handler+0x8>

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f000 f8c7 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	@ (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f000 fe20 	bl	80019b8 <__errno>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <_sbrk+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20020000 	.word	0x20020000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	200000a8 	.word	0x200000a8
 8000dac:	200001f8 	.word	0x200001f8

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dd8:	f7ff ffea 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f000 fddf 	bl	80019c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fe2f 	bl	8000a68 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e18:	0800233c 	.word	0x0800233c
  ldr r2, =_sbss
 8000e1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e20:	200001f8 	.word	0x200001f8

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <HAL_Init+0x40>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e38:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <HAL_Init+0x40>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <HAL_Init+0x40>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f931 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	200f      	movs	r0, #15
 8000e58:	f000 f808 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff ff1a 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023c00 	.word	0x40023c00

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f93b 	bl	8001106 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f911 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	200000ac 	.word	0x200000ac

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200000ac 	.word	0x200000ac

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	@ (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff47 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff5c 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffb0 	bl	8001074 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e267      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d075      	beq.n	800122a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800113e:	4b88      	ldr	r3, [pc, #544]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b04      	cmp	r3, #4
 8001148:	d00c      	beq.n	8001164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114a:	4b85      	ldr	r3, [pc, #532]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001152:	2b08      	cmp	r3, #8
 8001154:	d112      	bne.n	800117c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001156:	4b82      	ldr	r3, [pc, #520]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800115e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001162:	d10b      	bne.n	800117c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	4b7e      	ldr	r3, [pc, #504]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d05b      	beq.n	8001228 <HAL_RCC_OscConfig+0x108>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d157      	bne.n	8001228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e242      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001184:	d106      	bne.n	8001194 <HAL_RCC_OscConfig+0x74>
 8001186:	4b76      	ldr	r3, [pc, #472]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a75      	ldr	r2, [pc, #468]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e01d      	b.n	80011d0 <HAL_RCC_OscConfig+0xb0>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800119c:	d10c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x98>
 800119e:	4b70      	ldr	r3, [pc, #448]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6f      	ldr	r2, [pc, #444]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a6c      	ldr	r2, [pc, #432]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e00b      	b.n	80011d0 <HAL_RCC_OscConfig+0xb0>
 80011b8:	4b69      	ldr	r3, [pc, #420]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a68      	ldr	r2, [pc, #416]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b66      	ldr	r3, [pc, #408]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a65      	ldr	r2, [pc, #404]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d013      	beq.n	8001200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fe8c 	bl	8000ef4 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fe88 	bl	8000ef4 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	@ 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e207      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0xc0>
 80011fe:	e014      	b.n	800122a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fe78 	bl	8000ef4 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fe74 	bl	8000ef4 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	@ 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e1f3      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	4b51      	ldr	r3, [pc, #324]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0xe8>
 8001226:	e000      	b.n	800122a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d063      	beq.n	80012fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001236:	4b4a      	ldr	r3, [pc, #296]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001242:	4b47      	ldr	r3, [pc, #284]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800124a:	2b08      	cmp	r3, #8
 800124c:	d11c      	bne.n	8001288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124e:	4b44      	ldr	r3, [pc, #272]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d116      	bne.n	8001288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	4b41      	ldr	r3, [pc, #260]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_RCC_OscConfig+0x152>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e1c7      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001272:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4937      	ldr	r1, [pc, #220]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	e03a      	b.n	80012fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001290:	4b34      	ldr	r3, [pc, #208]	@ (8001364 <HAL_RCC_OscConfig+0x244>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001296:	f7ff fe2d 	bl	8000ef4 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fe29 	bl	8000ef4 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e1a8      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4925      	ldr	r1, [pc, #148]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
 80012d0:	e015      	b.n	80012fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d2:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <HAL_RCC_OscConfig+0x244>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fe0c 	bl	8000ef4 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e0:	f7ff fe08 	bl	8000ef4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e187      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d036      	beq.n	8001378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d016      	beq.n	8001340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_RCC_OscConfig+0x248>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff fdec 	bl	8000ef4 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fde8 	bl	8000ef4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e167      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x200>
 800133e:	e01b      	b.n	8001378 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001340:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_RCC_OscConfig+0x248>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fdd5 	bl	8000ef4 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	e00e      	b.n	800136c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134e:	f7ff fdd1 	bl	8000ef4 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d907      	bls.n	800136c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e150      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
 8001360:	40023800 	.word	0x40023800
 8001364:	42470000 	.word	0x42470000
 8001368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	4b88      	ldr	r3, [pc, #544]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800136e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1ea      	bne.n	800134e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 8097 	beq.w	80014b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138a:	4b81      	ldr	r3, [pc, #516]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10f      	bne.n	80013b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b7d      	ldr	r3, [pc, #500]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	4a7c      	ldr	r2, [pc, #496]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b2:	2301      	movs	r3, #1
 80013b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b6:	4b77      	ldr	r3, [pc, #476]	@ (8001594 <HAL_RCC_OscConfig+0x474>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d118      	bne.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c2:	4b74      	ldr	r3, [pc, #464]	@ (8001594 <HAL_RCC_OscConfig+0x474>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a73      	ldr	r2, [pc, #460]	@ (8001594 <HAL_RCC_OscConfig+0x474>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fd91 	bl	8000ef4 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d6:	f7ff fd8d 	bl	8000ef4 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e10c      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001594 <HAL_RCC_OscConfig+0x474>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d106      	bne.n	800140a <HAL_RCC_OscConfig+0x2ea>
 80013fc:	4b64      	ldr	r3, [pc, #400]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001400:	4a63      	ldr	r2, [pc, #396]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6713      	str	r3, [r2, #112]	@ 0x70
 8001408:	e01c      	b.n	8001444 <HAL_RCC_OscConfig+0x324>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b05      	cmp	r3, #5
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x30c>
 8001412:	4b5f      	ldr	r3, [pc, #380]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001416:	4a5e      	ldr	r2, [pc, #376]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6713      	str	r3, [r2, #112]	@ 0x70
 800141e:	4b5c      	ldr	r3, [pc, #368]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001422:	4a5b      	ldr	r2, [pc, #364]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6713      	str	r3, [r2, #112]	@ 0x70
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0x324>
 800142c:	4b58      	ldr	r3, [pc, #352]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001430:	4a57      	ldr	r2, [pc, #348]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	@ 0x70
 8001438:	4b55      	ldr	r3, [pc, #340]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143c:	4a54      	ldr	r2, [pc, #336]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800143e:	f023 0304 	bic.w	r3, r3, #4
 8001442:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d015      	beq.n	8001478 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fd52 	bl	8000ef4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001452:	e00a      	b.n	800146a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001454:	f7ff fd4e 	bl	8000ef4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e0cb      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146a:	4b49      	ldr	r3, [pc, #292]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0ee      	beq.n	8001454 <HAL_RCC_OscConfig+0x334>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff fd3c 	bl	8000ef4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147e:	e00a      	b.n	8001496 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f7ff fd38 	bl	8000ef4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e0b5      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001496:	4b3e      	ldr	r3, [pc, #248]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ee      	bne.n	8001480 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a8:	4b39      	ldr	r3, [pc, #228]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	4a38      	ldr	r2, [pc, #224]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80014ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80a1 	beq.w	8001600 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014be:	4b34      	ldr	r3, [pc, #208]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d05c      	beq.n	8001584 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d141      	bne.n	8001556 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <HAL_RCC_OscConfig+0x478>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fd0c 	bl	8000ef4 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fd08 	bl	8000ef4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e087      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69da      	ldr	r2, [r3, #28]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	3b01      	subs	r3, #1
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	491b      	ldr	r1, [pc, #108]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001528:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <HAL_RCC_OscConfig+0x478>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fce1 	bl	8000ef4 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fcdd 	bl	8000ef4 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e05c      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x416>
 8001554:	e054      	b.n	8001600 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_RCC_OscConfig+0x478>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fcca 	bl	8000ef4 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff fcc6 	bl	8000ef4 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e045      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x444>
 8001582:	e03d      	b.n	8001600 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e038      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000
 8001598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_RCC_OscConfig+0x4ec>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d028      	beq.n	80015fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d121      	bne.n	80015fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d11a      	bne.n	80015fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015cc:	4013      	ands	r3, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d111      	bne.n	80015fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	3b01      	subs	r3, #1
 80015e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0cc      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b68      	ldr	r3, [pc, #416]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d90c      	bls.n	800164c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b65      	ldr	r3, [pc, #404]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b63      	ldr	r3, [pc, #396]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0b8      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d020      	beq.n	800169a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001664:	4b59      	ldr	r3, [pc, #356]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a58      	ldr	r2, [pc, #352]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800166e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800167c:	4b53      	ldr	r3, [pc, #332]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a52      	ldr	r2, [pc, #328]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001688:	4b50      	ldr	r3, [pc, #320]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	494d      	ldr	r1, [pc, #308]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d044      	beq.n	8001730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b47      	ldr	r3, [pc, #284]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d119      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e07f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b3f      	ldr	r3, [pc, #252]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	4b3b      	ldr	r3, [pc, #236]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e067      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b37      	ldr	r3, [pc, #220]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4934      	ldr	r1, [pc, #208]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001700:	f7ff fbf8 	bl	8000ef4 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7ff fbf4 	bl	8000ef4 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e04f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 020c 	and.w	r2, r3, #12
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1eb      	bne.n	8001708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001730:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d20c      	bcs.n	8001758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e032      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4916      	ldr	r1, [pc, #88]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001782:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	490e      	ldr	r1, [pc, #56]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001796:	f000 f821 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 800179a:	4602      	mov	r2, r0
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	490a      	ldr	r1, [pc, #40]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	5ccb      	ldrb	r3, [r1, r3]
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fb58 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023c00 	.word	0x40023c00
 80017cc:	40023800 	.word	0x40023800
 80017d0:	080022e8 	.word	0x080022e8
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e0:	b090      	sub	sp, #64	@ 0x40
 80017e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80017e8:	2300      	movs	r3, #0
 80017ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017ec:	2300      	movs	r3, #0
 80017ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f4:	4b59      	ldr	r3, [pc, #356]	@ (800195c <HAL_RCC_GetSysClockFreq+0x180>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d00d      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x40>
 8001800:	2b08      	cmp	r3, #8
 8001802:	f200 80a1 	bhi.w	8001948 <HAL_RCC_GetSysClockFreq+0x16c>
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x34>
 800180a:	2b04      	cmp	r3, #4
 800180c:	d003      	beq.n	8001816 <HAL_RCC_GetSysClockFreq+0x3a>
 800180e:	e09b      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001810:	4b53      	ldr	r3, [pc, #332]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x184>)
 8001812:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001814:	e09b      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001816:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x188>)
 8001818:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800181a:	e098      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800181c:	4b4f      	ldr	r3, [pc, #316]	@ (800195c <HAL_RCC_GetSysClockFreq+0x180>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001824:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001826:	4b4d      	ldr	r3, [pc, #308]	@ (800195c <HAL_RCC_GetSysClockFreq+0x180>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d028      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001832:	4b4a      	ldr	r3, [pc, #296]	@ (800195c <HAL_RCC_GetSysClockFreq+0x180>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	099b      	lsrs	r3, r3, #6
 8001838:	2200      	movs	r2, #0
 800183a:	623b      	str	r3, [r7, #32]
 800183c:	627a      	str	r2, [r7, #36]	@ 0x24
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001844:	2100      	movs	r1, #0
 8001846:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x188>)
 8001848:	fb03 f201 	mul.w	r2, r3, r1
 800184c:	2300      	movs	r3, #0
 800184e:	fb00 f303 	mul.w	r3, r0, r3
 8001852:	4413      	add	r3, r2
 8001854:	4a43      	ldr	r2, [pc, #268]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x188>)
 8001856:	fba0 1202 	umull	r1, r2, r0, r2
 800185a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800185c:	460a      	mov	r2, r1
 800185e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001862:	4413      	add	r3, r2
 8001864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001868:	2200      	movs	r2, #0
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	61fa      	str	r2, [r7, #28]
 800186e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001872:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001876:	f7fe fcfb 	bl	8000270 <__aeabi_uldivmod>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4613      	mov	r3, r2
 8001880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001882:	e053      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <HAL_RCC_GetSysClockFreq+0x180>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	099b      	lsrs	r3, r3, #6
 800188a:	2200      	movs	r2, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	617a      	str	r2, [r7, #20]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001896:	f04f 0b00 	mov.w	fp, #0
 800189a:	4652      	mov	r2, sl
 800189c:	465b      	mov	r3, fp
 800189e:	f04f 0000 	mov.w	r0, #0
 80018a2:	f04f 0100 	mov.w	r1, #0
 80018a6:	0159      	lsls	r1, r3, #5
 80018a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ac:	0150      	lsls	r0, r2, #5
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	ebb2 080a 	subs.w	r8, r2, sl
 80018b6:	eb63 090b 	sbc.w	r9, r3, fp
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018ce:	ebb2 0408 	subs.w	r4, r2, r8
 80018d2:	eb63 0509 	sbc.w	r5, r3, r9
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	00eb      	lsls	r3, r5, #3
 80018e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e4:	00e2      	lsls	r2, r4, #3
 80018e6:	4614      	mov	r4, r2
 80018e8:	461d      	mov	r5, r3
 80018ea:	eb14 030a 	adds.w	r3, r4, sl
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	eb45 030b 	adc.w	r3, r5, fp
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001902:	4629      	mov	r1, r5
 8001904:	028b      	lsls	r3, r1, #10
 8001906:	4621      	mov	r1, r4
 8001908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800190c:	4621      	mov	r1, r4
 800190e:	028a      	lsls	r2, r1, #10
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001916:	2200      	movs	r2, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	60fa      	str	r2, [r7, #12]
 800191c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001920:	f7fe fca6 	bl	8000270 <__aeabi_uldivmod>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4613      	mov	r3, r2
 800192a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <HAL_RCC_GetSysClockFreq+0x180>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	0c1b      	lsrs	r3, r3, #16
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	3301      	adds	r3, #1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800193c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800193e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001946:	e002      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x184>)
 800194a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800194c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001950:	4618      	mov	r0, r3
 8001952:	3740      	adds	r7, #64	@ 0x40
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	017d7840 	.word	0x017d7840

08001968 <siprintf>:
 8001968:	b40e      	push	{r1, r2, r3}
 800196a:	b500      	push	{lr}
 800196c:	b09c      	sub	sp, #112	@ 0x70
 800196e:	ab1d      	add	r3, sp, #116	@ 0x74
 8001970:	9002      	str	r0, [sp, #8]
 8001972:	9006      	str	r0, [sp, #24]
 8001974:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001978:	4809      	ldr	r0, [pc, #36]	@ (80019a0 <siprintf+0x38>)
 800197a:	9107      	str	r1, [sp, #28]
 800197c:	9104      	str	r1, [sp, #16]
 800197e:	4909      	ldr	r1, [pc, #36]	@ (80019a4 <siprintf+0x3c>)
 8001980:	f853 2b04 	ldr.w	r2, [r3], #4
 8001984:	9105      	str	r1, [sp, #20]
 8001986:	6800      	ldr	r0, [r0, #0]
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	a902      	add	r1, sp, #8
 800198c:	f000 f994 	bl	8001cb8 <_svfiprintf_r>
 8001990:	9b02      	ldr	r3, [sp, #8]
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	b01c      	add	sp, #112	@ 0x70
 8001998:	f85d eb04 	ldr.w	lr, [sp], #4
 800199c:	b003      	add	sp, #12
 800199e:	4770      	bx	lr
 80019a0:	2000000c 	.word	0x2000000c
 80019a4:	ffff0208 	.word	0xffff0208

080019a8 <memset>:
 80019a8:	4402      	add	r2, r0
 80019aa:	4603      	mov	r3, r0
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d100      	bne.n	80019b2 <memset+0xa>
 80019b0:	4770      	bx	lr
 80019b2:	f803 1b01 	strb.w	r1, [r3], #1
 80019b6:	e7f9      	b.n	80019ac <memset+0x4>

080019b8 <__errno>:
 80019b8:	4b01      	ldr	r3, [pc, #4]	@ (80019c0 <__errno+0x8>)
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c

080019c4 <__libc_init_array>:
 80019c4:	b570      	push	{r4, r5, r6, lr}
 80019c6:	4d0d      	ldr	r5, [pc, #52]	@ (80019fc <__libc_init_array+0x38>)
 80019c8:	4c0d      	ldr	r4, [pc, #52]	@ (8001a00 <__libc_init_array+0x3c>)
 80019ca:	1b64      	subs	r4, r4, r5
 80019cc:	10a4      	asrs	r4, r4, #2
 80019ce:	2600      	movs	r6, #0
 80019d0:	42a6      	cmp	r6, r4
 80019d2:	d109      	bne.n	80019e8 <__libc_init_array+0x24>
 80019d4:	4d0b      	ldr	r5, [pc, #44]	@ (8001a04 <__libc_init_array+0x40>)
 80019d6:	4c0c      	ldr	r4, [pc, #48]	@ (8001a08 <__libc_init_array+0x44>)
 80019d8:	f000 fc66 	bl	80022a8 <_init>
 80019dc:	1b64      	subs	r4, r4, r5
 80019de:	10a4      	asrs	r4, r4, #2
 80019e0:	2600      	movs	r6, #0
 80019e2:	42a6      	cmp	r6, r4
 80019e4:	d105      	bne.n	80019f2 <__libc_init_array+0x2e>
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
 80019e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ec:	4798      	blx	r3
 80019ee:	3601      	adds	r6, #1
 80019f0:	e7ee      	b.n	80019d0 <__libc_init_array+0xc>
 80019f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80019f6:	4798      	blx	r3
 80019f8:	3601      	adds	r6, #1
 80019fa:	e7f2      	b.n	80019e2 <__libc_init_array+0x1e>
 80019fc:	08002334 	.word	0x08002334
 8001a00:	08002334 	.word	0x08002334
 8001a04:	08002334 	.word	0x08002334
 8001a08:	08002338 	.word	0x08002338

08001a0c <__retarget_lock_acquire_recursive>:
 8001a0c:	4770      	bx	lr

08001a0e <__retarget_lock_release_recursive>:
 8001a0e:	4770      	bx	lr

08001a10 <_free_r>:
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	4605      	mov	r5, r0
 8001a14:	2900      	cmp	r1, #0
 8001a16:	d041      	beq.n	8001a9c <_free_r+0x8c>
 8001a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a1c:	1f0c      	subs	r4, r1, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bfb8      	it	lt
 8001a22:	18e4      	addlt	r4, r4, r3
 8001a24:	f000 f8e0 	bl	8001be8 <__malloc_lock>
 8001a28:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa0 <_free_r+0x90>)
 8001a2a:	6813      	ldr	r3, [r2, #0]
 8001a2c:	b933      	cbnz	r3, 8001a3c <_free_r+0x2c>
 8001a2e:	6063      	str	r3, [r4, #4]
 8001a30:	6014      	str	r4, [r2, #0]
 8001a32:	4628      	mov	r0, r5
 8001a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a38:	f000 b8dc 	b.w	8001bf4 <__malloc_unlock>
 8001a3c:	42a3      	cmp	r3, r4
 8001a3e:	d908      	bls.n	8001a52 <_free_r+0x42>
 8001a40:	6820      	ldr	r0, [r4, #0]
 8001a42:	1821      	adds	r1, r4, r0
 8001a44:	428b      	cmp	r3, r1
 8001a46:	bf01      	itttt	eq
 8001a48:	6819      	ldreq	r1, [r3, #0]
 8001a4a:	685b      	ldreq	r3, [r3, #4]
 8001a4c:	1809      	addeq	r1, r1, r0
 8001a4e:	6021      	streq	r1, [r4, #0]
 8001a50:	e7ed      	b.n	8001a2e <_free_r+0x1e>
 8001a52:	461a      	mov	r2, r3
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	b10b      	cbz	r3, 8001a5c <_free_r+0x4c>
 8001a58:	42a3      	cmp	r3, r4
 8001a5a:	d9fa      	bls.n	8001a52 <_free_r+0x42>
 8001a5c:	6811      	ldr	r1, [r2, #0]
 8001a5e:	1850      	adds	r0, r2, r1
 8001a60:	42a0      	cmp	r0, r4
 8001a62:	d10b      	bne.n	8001a7c <_free_r+0x6c>
 8001a64:	6820      	ldr	r0, [r4, #0]
 8001a66:	4401      	add	r1, r0
 8001a68:	1850      	adds	r0, r2, r1
 8001a6a:	4283      	cmp	r3, r0
 8001a6c:	6011      	str	r1, [r2, #0]
 8001a6e:	d1e0      	bne.n	8001a32 <_free_r+0x22>
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	6053      	str	r3, [r2, #4]
 8001a76:	4408      	add	r0, r1
 8001a78:	6010      	str	r0, [r2, #0]
 8001a7a:	e7da      	b.n	8001a32 <_free_r+0x22>
 8001a7c:	d902      	bls.n	8001a84 <_free_r+0x74>
 8001a7e:	230c      	movs	r3, #12
 8001a80:	602b      	str	r3, [r5, #0]
 8001a82:	e7d6      	b.n	8001a32 <_free_r+0x22>
 8001a84:	6820      	ldr	r0, [r4, #0]
 8001a86:	1821      	adds	r1, r4, r0
 8001a88:	428b      	cmp	r3, r1
 8001a8a:	bf04      	itt	eq
 8001a8c:	6819      	ldreq	r1, [r3, #0]
 8001a8e:	685b      	ldreq	r3, [r3, #4]
 8001a90:	6063      	str	r3, [r4, #4]
 8001a92:	bf04      	itt	eq
 8001a94:	1809      	addeq	r1, r1, r0
 8001a96:	6021      	streq	r1, [r4, #0]
 8001a98:	6054      	str	r4, [r2, #4]
 8001a9a:	e7ca      	b.n	8001a32 <_free_r+0x22>
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200001f4 	.word	0x200001f4

08001aa4 <sbrk_aligned>:
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8001ae4 <sbrk_aligned+0x40>)
 8001aa8:	460c      	mov	r4, r1
 8001aaa:	6831      	ldr	r1, [r6, #0]
 8001aac:	4605      	mov	r5, r0
 8001aae:	b911      	cbnz	r1, 8001ab6 <sbrk_aligned+0x12>
 8001ab0:	f000 fba6 	bl	8002200 <_sbrk_r>
 8001ab4:	6030      	str	r0, [r6, #0]
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	4628      	mov	r0, r5
 8001aba:	f000 fba1 	bl	8002200 <_sbrk_r>
 8001abe:	1c43      	adds	r3, r0, #1
 8001ac0:	d103      	bne.n	8001aca <sbrk_aligned+0x26>
 8001ac2:	f04f 34ff 	mov.w	r4, #4294967295
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	bd70      	pop	{r4, r5, r6, pc}
 8001aca:	1cc4      	adds	r4, r0, #3
 8001acc:	f024 0403 	bic.w	r4, r4, #3
 8001ad0:	42a0      	cmp	r0, r4
 8001ad2:	d0f8      	beq.n	8001ac6 <sbrk_aligned+0x22>
 8001ad4:	1a21      	subs	r1, r4, r0
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	f000 fb92 	bl	8002200 <_sbrk_r>
 8001adc:	3001      	adds	r0, #1
 8001ade:	d1f2      	bne.n	8001ac6 <sbrk_aligned+0x22>
 8001ae0:	e7ef      	b.n	8001ac2 <sbrk_aligned+0x1e>
 8001ae2:	bf00      	nop
 8001ae4:	200001f0 	.word	0x200001f0

08001ae8 <_malloc_r>:
 8001ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001aec:	1ccd      	adds	r5, r1, #3
 8001aee:	f025 0503 	bic.w	r5, r5, #3
 8001af2:	3508      	adds	r5, #8
 8001af4:	2d0c      	cmp	r5, #12
 8001af6:	bf38      	it	cc
 8001af8:	250c      	movcc	r5, #12
 8001afa:	2d00      	cmp	r5, #0
 8001afc:	4606      	mov	r6, r0
 8001afe:	db01      	blt.n	8001b04 <_malloc_r+0x1c>
 8001b00:	42a9      	cmp	r1, r5
 8001b02:	d904      	bls.n	8001b0e <_malloc_r+0x26>
 8001b04:	230c      	movs	r3, #12
 8001b06:	6033      	str	r3, [r6, #0]
 8001b08:	2000      	movs	r0, #0
 8001b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001be4 <_malloc_r+0xfc>
 8001b12:	f000 f869 	bl	8001be8 <__malloc_lock>
 8001b16:	f8d8 3000 	ldr.w	r3, [r8]
 8001b1a:	461c      	mov	r4, r3
 8001b1c:	bb44      	cbnz	r4, 8001b70 <_malloc_r+0x88>
 8001b1e:	4629      	mov	r1, r5
 8001b20:	4630      	mov	r0, r6
 8001b22:	f7ff ffbf 	bl	8001aa4 <sbrk_aligned>
 8001b26:	1c43      	adds	r3, r0, #1
 8001b28:	4604      	mov	r4, r0
 8001b2a:	d158      	bne.n	8001bde <_malloc_r+0xf6>
 8001b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8001b30:	4627      	mov	r7, r4
 8001b32:	2f00      	cmp	r7, #0
 8001b34:	d143      	bne.n	8001bbe <_malloc_r+0xd6>
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d04b      	beq.n	8001bd2 <_malloc_r+0xea>
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	4639      	mov	r1, r7
 8001b3e:	4630      	mov	r0, r6
 8001b40:	eb04 0903 	add.w	r9, r4, r3
 8001b44:	f000 fb5c 	bl	8002200 <_sbrk_r>
 8001b48:	4581      	cmp	r9, r0
 8001b4a:	d142      	bne.n	8001bd2 <_malloc_r+0xea>
 8001b4c:	6821      	ldr	r1, [r4, #0]
 8001b4e:	1a6d      	subs	r5, r5, r1
 8001b50:	4629      	mov	r1, r5
 8001b52:	4630      	mov	r0, r6
 8001b54:	f7ff ffa6 	bl	8001aa4 <sbrk_aligned>
 8001b58:	3001      	adds	r0, #1
 8001b5a:	d03a      	beq.n	8001bd2 <_malloc_r+0xea>
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	442b      	add	r3, r5
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	f8d8 3000 	ldr.w	r3, [r8]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	bb62      	cbnz	r2, 8001bc4 <_malloc_r+0xdc>
 8001b6a:	f8c8 7000 	str.w	r7, [r8]
 8001b6e:	e00f      	b.n	8001b90 <_malloc_r+0xa8>
 8001b70:	6822      	ldr	r2, [r4, #0]
 8001b72:	1b52      	subs	r2, r2, r5
 8001b74:	d420      	bmi.n	8001bb8 <_malloc_r+0xd0>
 8001b76:	2a0b      	cmp	r2, #11
 8001b78:	d917      	bls.n	8001baa <_malloc_r+0xc2>
 8001b7a:	1961      	adds	r1, r4, r5
 8001b7c:	42a3      	cmp	r3, r4
 8001b7e:	6025      	str	r5, [r4, #0]
 8001b80:	bf18      	it	ne
 8001b82:	6059      	strne	r1, [r3, #4]
 8001b84:	6863      	ldr	r3, [r4, #4]
 8001b86:	bf08      	it	eq
 8001b88:	f8c8 1000 	streq.w	r1, [r8]
 8001b8c:	5162      	str	r2, [r4, r5]
 8001b8e:	604b      	str	r3, [r1, #4]
 8001b90:	4630      	mov	r0, r6
 8001b92:	f000 f82f 	bl	8001bf4 <__malloc_unlock>
 8001b96:	f104 000b 	add.w	r0, r4, #11
 8001b9a:	1d23      	adds	r3, r4, #4
 8001b9c:	f020 0007 	bic.w	r0, r0, #7
 8001ba0:	1ac2      	subs	r2, r0, r3
 8001ba2:	bf1c      	itt	ne
 8001ba4:	1a1b      	subne	r3, r3, r0
 8001ba6:	50a3      	strne	r3, [r4, r2]
 8001ba8:	e7af      	b.n	8001b0a <_malloc_r+0x22>
 8001baa:	6862      	ldr	r2, [r4, #4]
 8001bac:	42a3      	cmp	r3, r4
 8001bae:	bf0c      	ite	eq
 8001bb0:	f8c8 2000 	streq.w	r2, [r8]
 8001bb4:	605a      	strne	r2, [r3, #4]
 8001bb6:	e7eb      	b.n	8001b90 <_malloc_r+0xa8>
 8001bb8:	4623      	mov	r3, r4
 8001bba:	6864      	ldr	r4, [r4, #4]
 8001bbc:	e7ae      	b.n	8001b1c <_malloc_r+0x34>
 8001bbe:	463c      	mov	r4, r7
 8001bc0:	687f      	ldr	r7, [r7, #4]
 8001bc2:	e7b6      	b.n	8001b32 <_malloc_r+0x4a>
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	42a3      	cmp	r3, r4
 8001bca:	d1fb      	bne.n	8001bc4 <_malloc_r+0xdc>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	6053      	str	r3, [r2, #4]
 8001bd0:	e7de      	b.n	8001b90 <_malloc_r+0xa8>
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	6033      	str	r3, [r6, #0]
 8001bd6:	4630      	mov	r0, r6
 8001bd8:	f000 f80c 	bl	8001bf4 <__malloc_unlock>
 8001bdc:	e794      	b.n	8001b08 <_malloc_r+0x20>
 8001bde:	6005      	str	r5, [r0, #0]
 8001be0:	e7d6      	b.n	8001b90 <_malloc_r+0xa8>
 8001be2:	bf00      	nop
 8001be4:	200001f4 	.word	0x200001f4

08001be8 <__malloc_lock>:
 8001be8:	4801      	ldr	r0, [pc, #4]	@ (8001bf0 <__malloc_lock+0x8>)
 8001bea:	f7ff bf0f 	b.w	8001a0c <__retarget_lock_acquire_recursive>
 8001bee:	bf00      	nop
 8001bf0:	200001ec 	.word	0x200001ec

08001bf4 <__malloc_unlock>:
 8001bf4:	4801      	ldr	r0, [pc, #4]	@ (8001bfc <__malloc_unlock+0x8>)
 8001bf6:	f7ff bf0a 	b.w	8001a0e <__retarget_lock_release_recursive>
 8001bfa:	bf00      	nop
 8001bfc:	200001ec 	.word	0x200001ec

08001c00 <__ssputs_r>:
 8001c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c04:	688e      	ldr	r6, [r1, #8]
 8001c06:	461f      	mov	r7, r3
 8001c08:	42be      	cmp	r6, r7
 8001c0a:	680b      	ldr	r3, [r1, #0]
 8001c0c:	4682      	mov	sl, r0
 8001c0e:	460c      	mov	r4, r1
 8001c10:	4690      	mov	r8, r2
 8001c12:	d82d      	bhi.n	8001c70 <__ssputs_r+0x70>
 8001c14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001c1c:	d026      	beq.n	8001c6c <__ssputs_r+0x6c>
 8001c1e:	6965      	ldr	r5, [r4, #20]
 8001c20:	6909      	ldr	r1, [r1, #16]
 8001c22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c26:	eba3 0901 	sub.w	r9, r3, r1
 8001c2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c2e:	1c7b      	adds	r3, r7, #1
 8001c30:	444b      	add	r3, r9
 8001c32:	106d      	asrs	r5, r5, #1
 8001c34:	429d      	cmp	r5, r3
 8001c36:	bf38      	it	cc
 8001c38:	461d      	movcc	r5, r3
 8001c3a:	0553      	lsls	r3, r2, #21
 8001c3c:	d527      	bpl.n	8001c8e <__ssputs_r+0x8e>
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7ff ff52 	bl	8001ae8 <_malloc_r>
 8001c44:	4606      	mov	r6, r0
 8001c46:	b360      	cbz	r0, 8001ca2 <__ssputs_r+0xa2>
 8001c48:	6921      	ldr	r1, [r4, #16]
 8001c4a:	464a      	mov	r2, r9
 8001c4c:	f000 fae8 	bl	8002220 <memcpy>
 8001c50:	89a3      	ldrh	r3, [r4, #12]
 8001c52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c5a:	81a3      	strh	r3, [r4, #12]
 8001c5c:	6126      	str	r6, [r4, #16]
 8001c5e:	6165      	str	r5, [r4, #20]
 8001c60:	444e      	add	r6, r9
 8001c62:	eba5 0509 	sub.w	r5, r5, r9
 8001c66:	6026      	str	r6, [r4, #0]
 8001c68:	60a5      	str	r5, [r4, #8]
 8001c6a:	463e      	mov	r6, r7
 8001c6c:	42be      	cmp	r6, r7
 8001c6e:	d900      	bls.n	8001c72 <__ssputs_r+0x72>
 8001c70:	463e      	mov	r6, r7
 8001c72:	6820      	ldr	r0, [r4, #0]
 8001c74:	4632      	mov	r2, r6
 8001c76:	4641      	mov	r1, r8
 8001c78:	f000 faa8 	bl	80021cc <memmove>
 8001c7c:	68a3      	ldr	r3, [r4, #8]
 8001c7e:	1b9b      	subs	r3, r3, r6
 8001c80:	60a3      	str	r3, [r4, #8]
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	4433      	add	r3, r6
 8001c86:	6023      	str	r3, [r4, #0]
 8001c88:	2000      	movs	r0, #0
 8001c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c8e:	462a      	mov	r2, r5
 8001c90:	f000 fad4 	bl	800223c <_realloc_r>
 8001c94:	4606      	mov	r6, r0
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d1e0      	bne.n	8001c5c <__ssputs_r+0x5c>
 8001c9a:	6921      	ldr	r1, [r4, #16]
 8001c9c:	4650      	mov	r0, sl
 8001c9e:	f7ff feb7 	bl	8001a10 <_free_r>
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	f8ca 3000 	str.w	r3, [sl]
 8001ca8:	89a3      	ldrh	r3, [r4, #12]
 8001caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cae:	81a3      	strh	r3, [r4, #12]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	e7e9      	b.n	8001c8a <__ssputs_r+0x8a>
	...

08001cb8 <_svfiprintf_r>:
 8001cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cbc:	4698      	mov	r8, r3
 8001cbe:	898b      	ldrh	r3, [r1, #12]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	b09d      	sub	sp, #116	@ 0x74
 8001cc4:	4607      	mov	r7, r0
 8001cc6:	460d      	mov	r5, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	d510      	bpl.n	8001cee <_svfiprintf_r+0x36>
 8001ccc:	690b      	ldr	r3, [r1, #16]
 8001cce:	b973      	cbnz	r3, 8001cee <_svfiprintf_r+0x36>
 8001cd0:	2140      	movs	r1, #64	@ 0x40
 8001cd2:	f7ff ff09 	bl	8001ae8 <_malloc_r>
 8001cd6:	6028      	str	r0, [r5, #0]
 8001cd8:	6128      	str	r0, [r5, #16]
 8001cda:	b930      	cbnz	r0, 8001cea <_svfiprintf_r+0x32>
 8001cdc:	230c      	movs	r3, #12
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	b01d      	add	sp, #116	@ 0x74
 8001ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cea:	2340      	movs	r3, #64	@ 0x40
 8001cec:	616b      	str	r3, [r5, #20]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cfc:	2330      	movs	r3, #48	@ 0x30
 8001cfe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001e9c <_svfiprintf_r+0x1e4>
 8001d02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d06:	f04f 0901 	mov.w	r9, #1
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	469a      	mov	sl, r3
 8001d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d12:	b10a      	cbz	r2, 8001d18 <_svfiprintf_r+0x60>
 8001d14:	2a25      	cmp	r2, #37	@ 0x25
 8001d16:	d1f9      	bne.n	8001d0c <_svfiprintf_r+0x54>
 8001d18:	ebba 0b04 	subs.w	fp, sl, r4
 8001d1c:	d00b      	beq.n	8001d36 <_svfiprintf_r+0x7e>
 8001d1e:	465b      	mov	r3, fp
 8001d20:	4622      	mov	r2, r4
 8001d22:	4629      	mov	r1, r5
 8001d24:	4638      	mov	r0, r7
 8001d26:	f7ff ff6b 	bl	8001c00 <__ssputs_r>
 8001d2a:	3001      	adds	r0, #1
 8001d2c:	f000 80a7 	beq.w	8001e7e <_svfiprintf_r+0x1c6>
 8001d30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d32:	445a      	add	r2, fp
 8001d34:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d36:	f89a 3000 	ldrb.w	r3, [sl]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 809f 	beq.w	8001e7e <_svfiprintf_r+0x1c6>
 8001d40:	2300      	movs	r3, #0
 8001d42:	f04f 32ff 	mov.w	r2, #4294967295
 8001d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d4a:	f10a 0a01 	add.w	sl, sl, #1
 8001d4e:	9304      	str	r3, [sp, #16]
 8001d50:	9307      	str	r3, [sp, #28]
 8001d52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001d56:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d58:	4654      	mov	r4, sl
 8001d5a:	2205      	movs	r2, #5
 8001d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d60:	484e      	ldr	r0, [pc, #312]	@ (8001e9c <_svfiprintf_r+0x1e4>)
 8001d62:	f7fe fa35 	bl	80001d0 <memchr>
 8001d66:	9a04      	ldr	r2, [sp, #16]
 8001d68:	b9d8      	cbnz	r0, 8001da2 <_svfiprintf_r+0xea>
 8001d6a:	06d0      	lsls	r0, r2, #27
 8001d6c:	bf44      	itt	mi
 8001d6e:	2320      	movmi	r3, #32
 8001d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d74:	0711      	lsls	r1, r2, #28
 8001d76:	bf44      	itt	mi
 8001d78:	232b      	movmi	r3, #43	@ 0x2b
 8001d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8001d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d84:	d015      	beq.n	8001db2 <_svfiprintf_r+0xfa>
 8001d86:	9a07      	ldr	r2, [sp, #28]
 8001d88:	4654      	mov	r4, sl
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f04f 0c0a 	mov.w	ip, #10
 8001d90:	4621      	mov	r1, r4
 8001d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d96:	3b30      	subs	r3, #48	@ 0x30
 8001d98:	2b09      	cmp	r3, #9
 8001d9a:	d94b      	bls.n	8001e34 <_svfiprintf_r+0x17c>
 8001d9c:	b1b0      	cbz	r0, 8001dcc <_svfiprintf_r+0x114>
 8001d9e:	9207      	str	r2, [sp, #28]
 8001da0:	e014      	b.n	8001dcc <_svfiprintf_r+0x114>
 8001da2:	eba0 0308 	sub.w	r3, r0, r8
 8001da6:	fa09 f303 	lsl.w	r3, r9, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	9304      	str	r3, [sp, #16]
 8001dae:	46a2      	mov	sl, r4
 8001db0:	e7d2      	b.n	8001d58 <_svfiprintf_r+0xa0>
 8001db2:	9b03      	ldr	r3, [sp, #12]
 8001db4:	1d19      	adds	r1, r3, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	9103      	str	r1, [sp, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	bfbb      	ittet	lt
 8001dbe:	425b      	neglt	r3, r3
 8001dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8001dc4:	9307      	strge	r3, [sp, #28]
 8001dc6:	9307      	strlt	r3, [sp, #28]
 8001dc8:	bfb8      	it	lt
 8001dca:	9204      	strlt	r2, [sp, #16]
 8001dcc:	7823      	ldrb	r3, [r4, #0]
 8001dce:	2b2e      	cmp	r3, #46	@ 0x2e
 8001dd0:	d10a      	bne.n	8001de8 <_svfiprintf_r+0x130>
 8001dd2:	7863      	ldrb	r3, [r4, #1]
 8001dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dd6:	d132      	bne.n	8001e3e <_svfiprintf_r+0x186>
 8001dd8:	9b03      	ldr	r3, [sp, #12]
 8001dda:	1d1a      	adds	r2, r3, #4
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	9203      	str	r2, [sp, #12]
 8001de0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001de4:	3402      	adds	r4, #2
 8001de6:	9305      	str	r3, [sp, #20]
 8001de8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001eac <_svfiprintf_r+0x1f4>
 8001dec:	7821      	ldrb	r1, [r4, #0]
 8001dee:	2203      	movs	r2, #3
 8001df0:	4650      	mov	r0, sl
 8001df2:	f7fe f9ed 	bl	80001d0 <memchr>
 8001df6:	b138      	cbz	r0, 8001e08 <_svfiprintf_r+0x150>
 8001df8:	9b04      	ldr	r3, [sp, #16]
 8001dfa:	eba0 000a 	sub.w	r0, r0, sl
 8001dfe:	2240      	movs	r2, #64	@ 0x40
 8001e00:	4082      	lsls	r2, r0
 8001e02:	4313      	orrs	r3, r2
 8001e04:	3401      	adds	r4, #1
 8001e06:	9304      	str	r3, [sp, #16]
 8001e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e0c:	4824      	ldr	r0, [pc, #144]	@ (8001ea0 <_svfiprintf_r+0x1e8>)
 8001e0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e12:	2206      	movs	r2, #6
 8001e14:	f7fe f9dc 	bl	80001d0 <memchr>
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	d036      	beq.n	8001e8a <_svfiprintf_r+0x1d2>
 8001e1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <_svfiprintf_r+0x1ec>)
 8001e1e:	bb1b      	cbnz	r3, 8001e68 <_svfiprintf_r+0x1b0>
 8001e20:	9b03      	ldr	r3, [sp, #12]
 8001e22:	3307      	adds	r3, #7
 8001e24:	f023 0307 	bic.w	r3, r3, #7
 8001e28:	3308      	adds	r3, #8
 8001e2a:	9303      	str	r3, [sp, #12]
 8001e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e2e:	4433      	add	r3, r6
 8001e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e32:	e76a      	b.n	8001d0a <_svfiprintf_r+0x52>
 8001e34:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e38:	460c      	mov	r4, r1
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	e7a8      	b.n	8001d90 <_svfiprintf_r+0xd8>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	3401      	adds	r4, #1
 8001e42:	9305      	str	r3, [sp, #20]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f04f 0c0a 	mov.w	ip, #10
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e50:	3a30      	subs	r2, #48	@ 0x30
 8001e52:	2a09      	cmp	r2, #9
 8001e54:	d903      	bls.n	8001e5e <_svfiprintf_r+0x1a6>
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0c6      	beq.n	8001de8 <_svfiprintf_r+0x130>
 8001e5a:	9105      	str	r1, [sp, #20]
 8001e5c:	e7c4      	b.n	8001de8 <_svfiprintf_r+0x130>
 8001e5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e62:	4604      	mov	r4, r0
 8001e64:	2301      	movs	r3, #1
 8001e66:	e7f0      	b.n	8001e4a <_svfiprintf_r+0x192>
 8001e68:	ab03      	add	r3, sp, #12
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	462a      	mov	r2, r5
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <_svfiprintf_r+0x1f0>)
 8001e70:	a904      	add	r1, sp, #16
 8001e72:	4638      	mov	r0, r7
 8001e74:	f3af 8000 	nop.w
 8001e78:	1c42      	adds	r2, r0, #1
 8001e7a:	4606      	mov	r6, r0
 8001e7c:	d1d6      	bne.n	8001e2c <_svfiprintf_r+0x174>
 8001e7e:	89ab      	ldrh	r3, [r5, #12]
 8001e80:	065b      	lsls	r3, r3, #25
 8001e82:	f53f af2d 	bmi.w	8001ce0 <_svfiprintf_r+0x28>
 8001e86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001e88:	e72c      	b.n	8001ce4 <_svfiprintf_r+0x2c>
 8001e8a:	ab03      	add	r3, sp, #12
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	462a      	mov	r2, r5
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <_svfiprintf_r+0x1f0>)
 8001e92:	a904      	add	r1, sp, #16
 8001e94:	4638      	mov	r0, r7
 8001e96:	f000 f879 	bl	8001f8c <_printf_i>
 8001e9a:	e7ed      	b.n	8001e78 <_svfiprintf_r+0x1c0>
 8001e9c:	080022f8 	.word	0x080022f8
 8001ea0:	08002302 	.word	0x08002302
 8001ea4:	00000000 	.word	0x00000000
 8001ea8:	08001c01 	.word	0x08001c01
 8001eac:	080022fe 	.word	0x080022fe

08001eb0 <_printf_common>:
 8001eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb4:	4616      	mov	r6, r2
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	688a      	ldr	r2, [r1, #8]
 8001eba:	690b      	ldr	r3, [r1, #16]
 8001ebc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bfb8      	it	lt
 8001ec4:	4613      	movlt	r3, r2
 8001ec6:	6033      	str	r3, [r6, #0]
 8001ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ecc:	4607      	mov	r7, r0
 8001ece:	460c      	mov	r4, r1
 8001ed0:	b10a      	cbz	r2, 8001ed6 <_printf_common+0x26>
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	6033      	str	r3, [r6, #0]
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	0699      	lsls	r1, r3, #26
 8001eda:	bf42      	ittt	mi
 8001edc:	6833      	ldrmi	r3, [r6, #0]
 8001ede:	3302      	addmi	r3, #2
 8001ee0:	6033      	strmi	r3, [r6, #0]
 8001ee2:	6825      	ldr	r5, [r4, #0]
 8001ee4:	f015 0506 	ands.w	r5, r5, #6
 8001ee8:	d106      	bne.n	8001ef8 <_printf_common+0x48>
 8001eea:	f104 0a19 	add.w	sl, r4, #25
 8001eee:	68e3      	ldr	r3, [r4, #12]
 8001ef0:	6832      	ldr	r2, [r6, #0]
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	42ab      	cmp	r3, r5
 8001ef6:	dc26      	bgt.n	8001f46 <_printf_common+0x96>
 8001ef8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001efc:	6822      	ldr	r2, [r4, #0]
 8001efe:	3b00      	subs	r3, #0
 8001f00:	bf18      	it	ne
 8001f02:	2301      	movne	r3, #1
 8001f04:	0692      	lsls	r2, r2, #26
 8001f06:	d42b      	bmi.n	8001f60 <_printf_common+0xb0>
 8001f08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	4638      	mov	r0, r7
 8001f10:	47c8      	blx	r9
 8001f12:	3001      	adds	r0, #1
 8001f14:	d01e      	beq.n	8001f54 <_printf_common+0xa4>
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	6922      	ldr	r2, [r4, #16]
 8001f1a:	f003 0306 	and.w	r3, r3, #6
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf02      	ittt	eq
 8001f22:	68e5      	ldreq	r5, [r4, #12]
 8001f24:	6833      	ldreq	r3, [r6, #0]
 8001f26:	1aed      	subeq	r5, r5, r3
 8001f28:	68a3      	ldr	r3, [r4, #8]
 8001f2a:	bf0c      	ite	eq
 8001f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f30:	2500      	movne	r5, #0
 8001f32:	4293      	cmp	r3, r2
 8001f34:	bfc4      	itt	gt
 8001f36:	1a9b      	subgt	r3, r3, r2
 8001f38:	18ed      	addgt	r5, r5, r3
 8001f3a:	2600      	movs	r6, #0
 8001f3c:	341a      	adds	r4, #26
 8001f3e:	42b5      	cmp	r5, r6
 8001f40:	d11a      	bne.n	8001f78 <_printf_common+0xc8>
 8001f42:	2000      	movs	r0, #0
 8001f44:	e008      	b.n	8001f58 <_printf_common+0xa8>
 8001f46:	2301      	movs	r3, #1
 8001f48:	4652      	mov	r2, sl
 8001f4a:	4641      	mov	r1, r8
 8001f4c:	4638      	mov	r0, r7
 8001f4e:	47c8      	blx	r9
 8001f50:	3001      	adds	r0, #1
 8001f52:	d103      	bne.n	8001f5c <_printf_common+0xac>
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f5c:	3501      	adds	r5, #1
 8001f5e:	e7c6      	b.n	8001eee <_printf_common+0x3e>
 8001f60:	18e1      	adds	r1, r4, r3
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	2030      	movs	r0, #48	@ 0x30
 8001f66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f6a:	4422      	add	r2, r4
 8001f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f74:	3302      	adds	r3, #2
 8001f76:	e7c7      	b.n	8001f08 <_printf_common+0x58>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	4638      	mov	r0, r7
 8001f80:	47c8      	blx	r9
 8001f82:	3001      	adds	r0, #1
 8001f84:	d0e6      	beq.n	8001f54 <_printf_common+0xa4>
 8001f86:	3601      	adds	r6, #1
 8001f88:	e7d9      	b.n	8001f3e <_printf_common+0x8e>
	...

08001f8c <_printf_i>:
 8001f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f90:	7e0f      	ldrb	r7, [r1, #24]
 8001f92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001f94:	2f78      	cmp	r7, #120	@ 0x78
 8001f96:	4691      	mov	r9, r2
 8001f98:	4680      	mov	r8, r0
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	469a      	mov	sl, r3
 8001f9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001fa2:	d807      	bhi.n	8001fb4 <_printf_i+0x28>
 8001fa4:	2f62      	cmp	r7, #98	@ 0x62
 8001fa6:	d80a      	bhi.n	8001fbe <_printf_i+0x32>
 8001fa8:	2f00      	cmp	r7, #0
 8001faa:	f000 80d2 	beq.w	8002152 <_printf_i+0x1c6>
 8001fae:	2f58      	cmp	r7, #88	@ 0x58
 8001fb0:	f000 80b9 	beq.w	8002126 <_printf_i+0x19a>
 8001fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001fbc:	e03a      	b.n	8002034 <_printf_i+0xa8>
 8001fbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001fc2:	2b15      	cmp	r3, #21
 8001fc4:	d8f6      	bhi.n	8001fb4 <_printf_i+0x28>
 8001fc6:	a101      	add	r1, pc, #4	@ (adr r1, 8001fcc <_printf_i+0x40>)
 8001fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fcc:	08002025 	.word	0x08002025
 8001fd0:	08002039 	.word	0x08002039
 8001fd4:	08001fb5 	.word	0x08001fb5
 8001fd8:	08001fb5 	.word	0x08001fb5
 8001fdc:	08001fb5 	.word	0x08001fb5
 8001fe0:	08001fb5 	.word	0x08001fb5
 8001fe4:	08002039 	.word	0x08002039
 8001fe8:	08001fb5 	.word	0x08001fb5
 8001fec:	08001fb5 	.word	0x08001fb5
 8001ff0:	08001fb5 	.word	0x08001fb5
 8001ff4:	08001fb5 	.word	0x08001fb5
 8001ff8:	08002139 	.word	0x08002139
 8001ffc:	08002063 	.word	0x08002063
 8002000:	080020f3 	.word	0x080020f3
 8002004:	08001fb5 	.word	0x08001fb5
 8002008:	08001fb5 	.word	0x08001fb5
 800200c:	0800215b 	.word	0x0800215b
 8002010:	08001fb5 	.word	0x08001fb5
 8002014:	08002063 	.word	0x08002063
 8002018:	08001fb5 	.word	0x08001fb5
 800201c:	08001fb5 	.word	0x08001fb5
 8002020:	080020fb 	.word	0x080020fb
 8002024:	6833      	ldr	r3, [r6, #0]
 8002026:	1d1a      	adds	r2, r3, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6032      	str	r2, [r6, #0]
 800202c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002030:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002034:	2301      	movs	r3, #1
 8002036:	e09d      	b.n	8002174 <_printf_i+0x1e8>
 8002038:	6833      	ldr	r3, [r6, #0]
 800203a:	6820      	ldr	r0, [r4, #0]
 800203c:	1d19      	adds	r1, r3, #4
 800203e:	6031      	str	r1, [r6, #0]
 8002040:	0606      	lsls	r6, r0, #24
 8002042:	d501      	bpl.n	8002048 <_printf_i+0xbc>
 8002044:	681d      	ldr	r5, [r3, #0]
 8002046:	e003      	b.n	8002050 <_printf_i+0xc4>
 8002048:	0645      	lsls	r5, r0, #25
 800204a:	d5fb      	bpl.n	8002044 <_printf_i+0xb8>
 800204c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002050:	2d00      	cmp	r5, #0
 8002052:	da03      	bge.n	800205c <_printf_i+0xd0>
 8002054:	232d      	movs	r3, #45	@ 0x2d
 8002056:	426d      	negs	r5, r5
 8002058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800205c:	4859      	ldr	r0, [pc, #356]	@ (80021c4 <_printf_i+0x238>)
 800205e:	230a      	movs	r3, #10
 8002060:	e011      	b.n	8002086 <_printf_i+0xfa>
 8002062:	6821      	ldr	r1, [r4, #0]
 8002064:	6833      	ldr	r3, [r6, #0]
 8002066:	0608      	lsls	r0, r1, #24
 8002068:	f853 5b04 	ldr.w	r5, [r3], #4
 800206c:	d402      	bmi.n	8002074 <_printf_i+0xe8>
 800206e:	0649      	lsls	r1, r1, #25
 8002070:	bf48      	it	mi
 8002072:	b2ad      	uxthmi	r5, r5
 8002074:	2f6f      	cmp	r7, #111	@ 0x6f
 8002076:	4853      	ldr	r0, [pc, #332]	@ (80021c4 <_printf_i+0x238>)
 8002078:	6033      	str	r3, [r6, #0]
 800207a:	bf14      	ite	ne
 800207c:	230a      	movne	r3, #10
 800207e:	2308      	moveq	r3, #8
 8002080:	2100      	movs	r1, #0
 8002082:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002086:	6866      	ldr	r6, [r4, #4]
 8002088:	60a6      	str	r6, [r4, #8]
 800208a:	2e00      	cmp	r6, #0
 800208c:	bfa2      	ittt	ge
 800208e:	6821      	ldrge	r1, [r4, #0]
 8002090:	f021 0104 	bicge.w	r1, r1, #4
 8002094:	6021      	strge	r1, [r4, #0]
 8002096:	b90d      	cbnz	r5, 800209c <_printf_i+0x110>
 8002098:	2e00      	cmp	r6, #0
 800209a:	d04b      	beq.n	8002134 <_printf_i+0x1a8>
 800209c:	4616      	mov	r6, r2
 800209e:	fbb5 f1f3 	udiv	r1, r5, r3
 80020a2:	fb03 5711 	mls	r7, r3, r1, r5
 80020a6:	5dc7      	ldrb	r7, [r0, r7]
 80020a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020ac:	462f      	mov	r7, r5
 80020ae:	42bb      	cmp	r3, r7
 80020b0:	460d      	mov	r5, r1
 80020b2:	d9f4      	bls.n	800209e <_printf_i+0x112>
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d10b      	bne.n	80020d0 <_printf_i+0x144>
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	07df      	lsls	r7, r3, #31
 80020bc:	d508      	bpl.n	80020d0 <_printf_i+0x144>
 80020be:	6923      	ldr	r3, [r4, #16]
 80020c0:	6861      	ldr	r1, [r4, #4]
 80020c2:	4299      	cmp	r1, r3
 80020c4:	bfde      	ittt	le
 80020c6:	2330      	movle	r3, #48	@ 0x30
 80020c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020d0:	1b92      	subs	r2, r2, r6
 80020d2:	6122      	str	r2, [r4, #16]
 80020d4:	f8cd a000 	str.w	sl, [sp]
 80020d8:	464b      	mov	r3, r9
 80020da:	aa03      	add	r2, sp, #12
 80020dc:	4621      	mov	r1, r4
 80020de:	4640      	mov	r0, r8
 80020e0:	f7ff fee6 	bl	8001eb0 <_printf_common>
 80020e4:	3001      	adds	r0, #1
 80020e6:	d14a      	bne.n	800217e <_printf_i+0x1f2>
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	b004      	add	sp, #16
 80020ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	6023      	str	r3, [r4, #0]
 80020fa:	4833      	ldr	r0, [pc, #204]	@ (80021c8 <_printf_i+0x23c>)
 80020fc:	2778      	movs	r7, #120	@ 0x78
 80020fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	6831      	ldr	r1, [r6, #0]
 8002106:	061f      	lsls	r7, r3, #24
 8002108:	f851 5b04 	ldr.w	r5, [r1], #4
 800210c:	d402      	bmi.n	8002114 <_printf_i+0x188>
 800210e:	065f      	lsls	r7, r3, #25
 8002110:	bf48      	it	mi
 8002112:	b2ad      	uxthmi	r5, r5
 8002114:	6031      	str	r1, [r6, #0]
 8002116:	07d9      	lsls	r1, r3, #31
 8002118:	bf44      	itt	mi
 800211a:	f043 0320 	orrmi.w	r3, r3, #32
 800211e:	6023      	strmi	r3, [r4, #0]
 8002120:	b11d      	cbz	r5, 800212a <_printf_i+0x19e>
 8002122:	2310      	movs	r3, #16
 8002124:	e7ac      	b.n	8002080 <_printf_i+0xf4>
 8002126:	4827      	ldr	r0, [pc, #156]	@ (80021c4 <_printf_i+0x238>)
 8002128:	e7e9      	b.n	80020fe <_printf_i+0x172>
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	f023 0320 	bic.w	r3, r3, #32
 8002130:	6023      	str	r3, [r4, #0]
 8002132:	e7f6      	b.n	8002122 <_printf_i+0x196>
 8002134:	4616      	mov	r6, r2
 8002136:	e7bd      	b.n	80020b4 <_printf_i+0x128>
 8002138:	6833      	ldr	r3, [r6, #0]
 800213a:	6825      	ldr	r5, [r4, #0]
 800213c:	6961      	ldr	r1, [r4, #20]
 800213e:	1d18      	adds	r0, r3, #4
 8002140:	6030      	str	r0, [r6, #0]
 8002142:	062e      	lsls	r6, r5, #24
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	d501      	bpl.n	800214c <_printf_i+0x1c0>
 8002148:	6019      	str	r1, [r3, #0]
 800214a:	e002      	b.n	8002152 <_printf_i+0x1c6>
 800214c:	0668      	lsls	r0, r5, #25
 800214e:	d5fb      	bpl.n	8002148 <_printf_i+0x1bc>
 8002150:	8019      	strh	r1, [r3, #0]
 8002152:	2300      	movs	r3, #0
 8002154:	6123      	str	r3, [r4, #16]
 8002156:	4616      	mov	r6, r2
 8002158:	e7bc      	b.n	80020d4 <_printf_i+0x148>
 800215a:	6833      	ldr	r3, [r6, #0]
 800215c:	1d1a      	adds	r2, r3, #4
 800215e:	6032      	str	r2, [r6, #0]
 8002160:	681e      	ldr	r6, [r3, #0]
 8002162:	6862      	ldr	r2, [r4, #4]
 8002164:	2100      	movs	r1, #0
 8002166:	4630      	mov	r0, r6
 8002168:	f7fe f832 	bl	80001d0 <memchr>
 800216c:	b108      	cbz	r0, 8002172 <_printf_i+0x1e6>
 800216e:	1b80      	subs	r0, r0, r6
 8002170:	6060      	str	r0, [r4, #4]
 8002172:	6863      	ldr	r3, [r4, #4]
 8002174:	6123      	str	r3, [r4, #16]
 8002176:	2300      	movs	r3, #0
 8002178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800217c:	e7aa      	b.n	80020d4 <_printf_i+0x148>
 800217e:	6923      	ldr	r3, [r4, #16]
 8002180:	4632      	mov	r2, r6
 8002182:	4649      	mov	r1, r9
 8002184:	4640      	mov	r0, r8
 8002186:	47d0      	blx	sl
 8002188:	3001      	adds	r0, #1
 800218a:	d0ad      	beq.n	80020e8 <_printf_i+0x15c>
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	079b      	lsls	r3, r3, #30
 8002190:	d413      	bmi.n	80021ba <_printf_i+0x22e>
 8002192:	68e0      	ldr	r0, [r4, #12]
 8002194:	9b03      	ldr	r3, [sp, #12]
 8002196:	4298      	cmp	r0, r3
 8002198:	bfb8      	it	lt
 800219a:	4618      	movlt	r0, r3
 800219c:	e7a6      	b.n	80020ec <_printf_i+0x160>
 800219e:	2301      	movs	r3, #1
 80021a0:	4632      	mov	r2, r6
 80021a2:	4649      	mov	r1, r9
 80021a4:	4640      	mov	r0, r8
 80021a6:	47d0      	blx	sl
 80021a8:	3001      	adds	r0, #1
 80021aa:	d09d      	beq.n	80020e8 <_printf_i+0x15c>
 80021ac:	3501      	adds	r5, #1
 80021ae:	68e3      	ldr	r3, [r4, #12]
 80021b0:	9903      	ldr	r1, [sp, #12]
 80021b2:	1a5b      	subs	r3, r3, r1
 80021b4:	42ab      	cmp	r3, r5
 80021b6:	dcf2      	bgt.n	800219e <_printf_i+0x212>
 80021b8:	e7eb      	b.n	8002192 <_printf_i+0x206>
 80021ba:	2500      	movs	r5, #0
 80021bc:	f104 0619 	add.w	r6, r4, #25
 80021c0:	e7f5      	b.n	80021ae <_printf_i+0x222>
 80021c2:	bf00      	nop
 80021c4:	08002309 	.word	0x08002309
 80021c8:	0800231a 	.word	0x0800231a

080021cc <memmove>:
 80021cc:	4288      	cmp	r0, r1
 80021ce:	b510      	push	{r4, lr}
 80021d0:	eb01 0402 	add.w	r4, r1, r2
 80021d4:	d902      	bls.n	80021dc <memmove+0x10>
 80021d6:	4284      	cmp	r4, r0
 80021d8:	4623      	mov	r3, r4
 80021da:	d807      	bhi.n	80021ec <memmove+0x20>
 80021dc:	1e43      	subs	r3, r0, #1
 80021de:	42a1      	cmp	r1, r4
 80021e0:	d008      	beq.n	80021f4 <memmove+0x28>
 80021e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80021ea:	e7f8      	b.n	80021de <memmove+0x12>
 80021ec:	4402      	add	r2, r0
 80021ee:	4601      	mov	r1, r0
 80021f0:	428a      	cmp	r2, r1
 80021f2:	d100      	bne.n	80021f6 <memmove+0x2a>
 80021f4:	bd10      	pop	{r4, pc}
 80021f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80021fe:	e7f7      	b.n	80021f0 <memmove+0x24>

08002200 <_sbrk_r>:
 8002200:	b538      	push	{r3, r4, r5, lr}
 8002202:	4d06      	ldr	r5, [pc, #24]	@ (800221c <_sbrk_r+0x1c>)
 8002204:	2300      	movs	r3, #0
 8002206:	4604      	mov	r4, r0
 8002208:	4608      	mov	r0, r1
 800220a:	602b      	str	r3, [r5, #0]
 800220c:	f7fe fd9a 	bl	8000d44 <_sbrk>
 8002210:	1c43      	adds	r3, r0, #1
 8002212:	d102      	bne.n	800221a <_sbrk_r+0x1a>
 8002214:	682b      	ldr	r3, [r5, #0]
 8002216:	b103      	cbz	r3, 800221a <_sbrk_r+0x1a>
 8002218:	6023      	str	r3, [r4, #0]
 800221a:	bd38      	pop	{r3, r4, r5, pc}
 800221c:	200001e8 	.word	0x200001e8

08002220 <memcpy>:
 8002220:	440a      	add	r2, r1
 8002222:	4291      	cmp	r1, r2
 8002224:	f100 33ff 	add.w	r3, r0, #4294967295
 8002228:	d100      	bne.n	800222c <memcpy+0xc>
 800222a:	4770      	bx	lr
 800222c:	b510      	push	{r4, lr}
 800222e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002236:	4291      	cmp	r1, r2
 8002238:	d1f9      	bne.n	800222e <memcpy+0xe>
 800223a:	bd10      	pop	{r4, pc}

0800223c <_realloc_r>:
 800223c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002240:	4680      	mov	r8, r0
 8002242:	4615      	mov	r5, r2
 8002244:	460c      	mov	r4, r1
 8002246:	b921      	cbnz	r1, 8002252 <_realloc_r+0x16>
 8002248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800224c:	4611      	mov	r1, r2
 800224e:	f7ff bc4b 	b.w	8001ae8 <_malloc_r>
 8002252:	b92a      	cbnz	r2, 8002260 <_realloc_r+0x24>
 8002254:	f7ff fbdc 	bl	8001a10 <_free_r>
 8002258:	2400      	movs	r4, #0
 800225a:	4620      	mov	r0, r4
 800225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002260:	f000 f81a 	bl	8002298 <_malloc_usable_size_r>
 8002264:	4285      	cmp	r5, r0
 8002266:	4606      	mov	r6, r0
 8002268:	d802      	bhi.n	8002270 <_realloc_r+0x34>
 800226a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800226e:	d8f4      	bhi.n	800225a <_realloc_r+0x1e>
 8002270:	4629      	mov	r1, r5
 8002272:	4640      	mov	r0, r8
 8002274:	f7ff fc38 	bl	8001ae8 <_malloc_r>
 8002278:	4607      	mov	r7, r0
 800227a:	2800      	cmp	r0, #0
 800227c:	d0ec      	beq.n	8002258 <_realloc_r+0x1c>
 800227e:	42b5      	cmp	r5, r6
 8002280:	462a      	mov	r2, r5
 8002282:	4621      	mov	r1, r4
 8002284:	bf28      	it	cs
 8002286:	4632      	movcs	r2, r6
 8002288:	f7ff ffca 	bl	8002220 <memcpy>
 800228c:	4621      	mov	r1, r4
 800228e:	4640      	mov	r0, r8
 8002290:	f7ff fbbe 	bl	8001a10 <_free_r>
 8002294:	463c      	mov	r4, r7
 8002296:	e7e0      	b.n	800225a <_realloc_r+0x1e>

08002298 <_malloc_usable_size_r>:
 8002298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800229c:	1f18      	subs	r0, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	bfbc      	itt	lt
 80022a2:	580b      	ldrlt	r3, [r1, r0]
 80022a4:	18c0      	addlt	r0, r0, r3
 80022a6:	4770      	bx	lr

080022a8 <_init>:
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	bf00      	nop
 80022ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ae:	bc08      	pop	{r3}
 80022b0:	469e      	mov	lr, r3
 80022b2:	4770      	bx	lr

080022b4 <_fini>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	bf00      	nop
 80022b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ba:	bc08      	pop	{r3}
 80022bc:	469e      	mov	lr, r3
 80022be:	4770      	bx	lr
